#!/bin/sh
# -*- mode: shell-script; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# ex: ts=8 sw=4 sts=4 et filetype=sh
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# This file is part of systemd.
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

COMMAND="$1"
KERNEL_VERSION="$2"
ENTRY_DIR_ABS="$3"
KERNEL_IMAGE="$4"
INITRD_OPTIONS_SHIFT="4"

[ -e "$KERNEL_INSTALL_MACHINE_ID" ] || exit 0
[ "$KERNEL_INSTALL_LAYOUT" = "bls-efi" ] || exit 0

MACHINE_ID="$KERNEL_INSTALL_MACHINE_ID"
BOOT_ROOT="$KERNEL_INSTALL_BOOT_ROOT"

BOOT_MNT="$(stat -c %m "$BOOT_ROOT")"
if [ "$BOOT_MNT" = '/' ]; then
    ENTRY_DIR="$ENTRY_DIR_ABS"
else
    ENTRY_DIR="${ENTRY_DIR_ABS#$BOOT_MNT}"
fi

case "$COMMAND" in
    remove)
        exec rm -f \
            "$BOOT_ROOT/loader/entries/$MACHINE_ID-$KERNEL_VERSION.conf" \
            "$BOOT_ROOT/loader/entries/$MACHINE_ID-$KERNEL_VERSION+"*".conf"
        ;;
    add)
        ;;
    *)
        exit 1
        ;;
esac

[ -e "$KERNEL_IMAGE" ] || exit 1

if [ -f /etc/os-release ]; then
    . /etc/os-release
elif [ -f /usr/lib/os-release ]; then
    . /usr/lib/os-release
fi

[ -e "$PRETTY_NAME" ] || PRETTY_NAME="Linux $KERNEL_VERSION"

if [ -f /etc/kernel/cmdline ]; then
    BOOT_OPTIONS="$(tr -s "$IFS" " " < /etc/kernel/cmdline | sed 's/ $//')"
elif [ -f /usr/lib/kernel/cmdline ]; then
    BOOT_OPTIONS="$(tr -s "$IFS" " " < /usr/lib/kernel/cmdline | sed 's/ $//')"
else
    BOOT_OPTIONS="$(tr -s "$IFS" "\n" < /proc/cmdline | grep -ve '^BOOT_IMAGE=' -e '^initrd=' | tr "\n" " " | sed 's/ $//')"
fi

if [ -f /etc/kernel/tries ]; then
    read -r TRIES < /etc/kernel/tries
    if ! echo "$TRIES" | grep -q '^[0-9][0-9]*$'; then
        echo "/etc/kernel/tries: $TRIES is not an integer." >&2
        exit 1
    fi
    LOADER_ENTRY="$BOOT_ROOT/loader/entries/$MACHINE_ID-$KERNEL_VERSION+$TRIES.conf"
else
    LOADER_ENTRY="$BOOT_ROOT/loader/entries/$MACHINE_ID-$KERNEL_VERSION.conf"
fi

if ! [ -d "$ENTRY_DIR_ABS" ]; then
    if [ "$KERNEL_INSTALL_VERBOSE" -gt 0 ]; then
        echo "+mkdir -v -p $ENTRY_DIR_ABS"
        mkdir -v -p "$ENTRY_DIR_ABS"
    else
        mkdir -p "$ENTRY_DIR_ABS"
    fi
fi

install -g root -o root -m 0644 "$KERNEL_IMAGE" "$ENTRY_DIR_ABS/linux" || {
    echo "Could not copy '$KERNEL_IMAGE' to '$ENTRY_DIR_ABS/linux'." >&2
    exit 1
}

shift "$INITRD_OPTIONS_SHIFT"
for initrd; do
    [ -f "${initrd}" ] || continue

    initrd_basename="${initrd##*/}"
    [ "$KERNEL_INSTALL_VERBOSE" -gt 0 ] && echo "Installing $ENTRY_DIR_ABS/${initrd_basename}"
    install -g root -o root -m 0644 "${initrd}" "$ENTRY_DIR_ABS/${initrd_basename}" || {
        echo "Could not copy '${initrd}' to '$ENTRY_DIR_ABS/${initrd_basename}'." >&2
        exit 1
    }
done

mkdir -p "${LOADER_ENTRY%/*}" || {
    echo "Could not create loader entry directory '${LOADER_ENTRY%/*}'." >&2
    exit 1
}

[ "$KERNEL_INSTALL_VERBOSE" -gt 0 ] && echo "Creating $LOADER_ENTRY"
{
    echo "title      $PRETTY_NAME"
    echo "version    $KERNEL_VERSION"
    echo "machine-id $MACHINE_ID"
    echo "options    $BOOT_OPTIONS"
    echo "linux      $ENTRY_DIR/linux"
    for initrd; do
        [ -f "${initrd}" ] || continue

        echo "initrd     $ENTRY_DIR/${initrd##*/}"
    done
    # Potentially generated by dracut in an earlier hook
    if [ "$#" = 0 ] && [ -f "$ENTRY_DIR_ABS/initrd" ]; then
        echo "initrd     $ENTRY_DIR/initrd"
    fi
} > "$LOADER_ENTRY" || {
    echo "Could not create loader entry '$LOADER_ENTRY'." >&2
    exit 1
}
exit 0
