#!/bin/sh
# -*- mode: shell-script; indent-tabs-mode: nil; sh-basic-offset: 4; -*-
# ex: ts=8 sw=4 sts=4 et filetype=sh
# SPDX-License-Identifier: LGPL-2.1-or-later
#
# This file is part of systemd.
#
# systemd is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# systemd is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with systemd; If not, see <http://www.gnu.org/licenses/>.

SKIP_REMAINING=77

usage()
{
    echo "Usage:"
    echo "  $0 [OPTIONS...] add KERNEL-VERSION KERNEL-IMAGE [INITRD-FILE ...]"
    echo "  $0 [OPTIONS...] remove KERNEL-VERSION"
    echo "Options:"
    echo "  -h,--help     Print this help"
    echo "  -v,--verbose  Increase verbosity"
}

dropindirs_sort()
{
    suffix=$1
    shift

    for d; do
        for i in "$d/"*"$suffix"; do
            if [ -e "$i" ]; then
                echo "${i##*/}"
            fi
        done
    done | sort -Vu | while read -r f; do
        for d; do
            if [ -e "$d/$f" ]; then
                [ -x "$d/$f" ] && echo "$d/$f"
                continue 2
            fi
        done
    done
}

export LC_COLLATE=C

for i; do
    if [ "$i" = "--help" ] || [ "$i" = "-h" ]; then
        usage
        exit 0
    fi
done

KERNEL_INSTALL_VERBOSE=0
if [ "$1" = "--verbose" ] || [ "$1" = "-v" ]; then
    shift
    KERNEL_INSTALL_VERBOSE=1
fi
export KERNEL_INSTALL_VERBOSE

if [ "${0##*/}" = 'installkernel' ]; then
    COMMAND='add'
    KERNEL_VERSION="$1"
    KERNEL_IMAGE="$2"
    # make install doesn't pass any initrds
else
    COMMAND="$1"
    KERNEL_VERSION="$2"
    KERNEL_IMAGE="$3"
    [ -e "$3" ] && shift 3
fi

if [ -z "$COMMAND" ] || [ -z "$KERNEL_VERSION" ]; then
    echo "Not enough arguments" >&2
    exit 1
fi

[ -r "/usr/lib/kernel/install.conf" ] && . /usr/lib/kernel/install.conf
[ -r "/etc/kernel/install.conf" ] && . /etc/kernel/install.conf

[ -z "$MACHINE_ID" ] && [ -f /etc/machine-id ] && [ "$(stat -fc %T /etc/machine-id)" != "tmpfs" ] && read -r MACHINE_ID < /etc/machine-id
[ -z "$MACHINE_ID" ] && MACHINE_ID="Default"

[ -z "$BOOT_ROOT" ] && for suff in "$MACHINE_ID" "Default" "loader/entries"; do
    for pref in "/efi" "/boot/efi" "/boot"; do
        if [ -d "$pref/$suff" ]; then
            BOOT_ROOT="$pref"
            break 2
        fi
    done
done

[ -z "$BOOT_ROOT" ] && for pref in "/efi" "/boot/efi"; do
    if mountpoint -q "$pref"; then
        BOOT_ROOT="$pref"
        break
    fi
done
[ -z "$BOOT_ROOT" ] && BOOT_ROOT="/boot"


ENTRY_DIR_ABS="$BOOT_ROOT/$MACHINE_ID/$KERNEL_VERSION"

export KERNEL_INSTALL_MACHINE_ID="$MACHINE_ID"
export KERNEL_INSTALL_BOOT_ROOT="$BOOT_ROOT"

if [ -z "$layout" ]; then
    # Administrative decision: if not present, some scripts generate into /boot.
    if [ -d "$BOOT_ROOT/$MACHINE_ID" ]; then
        layout="bls-efi"
    else
        layout="legacy"
    fi
fi


ENTRY_DIR_ABS="$BOOT_ROOT/$MACHINE_ID/$KERNEL_VERSION"

export KERNEL_INSTALL_MACHINE_ID="$MACHINE_ID"
export KERNEL_INSTALL_BOOT_ROOT="$BOOT_ROOT"
export KERNEL_INSTALL_LAYOUT="$layout"

[ -z "$no_compat_directories" ] && { [ "$layout" = "legacy" ] || [ "$layout" = "bls-efi" ]; }
MAKE_EDA=$?


ret=0

PLUGINS="$(
    dropindirs_sort ".install" \
        "/etc/kernel/install.d" \
        "/usr/lib/kernel/install.d"
)"
IFS="
"

case "$COMMAND" in
    add)
        if [ -z "$KERNEL_IMAGE" ]; then
            echo "Command 'add' requires an argument" >&2
            exit 1
        fi

        if ! [ -f "$KERNEL_IMAGE" ]; then
            echo "Kernel image argument ${KERNEL_IMAGE} not a file" >&2
            exit 1
        fi

        if [ "$MAKE_EDA" -eq 0 ]; then
            # Compatibility with earlier versions that used the presence of $BOOT_ROOT/$MACHINE_ID
            # to signal to 00-entry-directory to create $ENTRY_DIR_ABS
            # to serve as the indication to use or to not use the BLS
            if [ "$KERNEL_INSTALL_VERBOSE" -gt 0 ]; then
                echo "+mkdir -v -p $ENTRY_DIR_ABS"
                mkdir -v -p "$ENTRY_DIR_ABS"
            else
                mkdir -p "$ENTRY_DIR_ABS"
            fi
        fi

        for f in $PLUGINS; do
            [ "$KERNEL_INSTALL_VERBOSE" -gt 0 ] && echo "+$f add $KERNEL_VERSION $ENTRY_DIR_ABS $KERNEL_IMAGE $*"
            "$f" add "$KERNEL_VERSION" "$ENTRY_DIR_ABS" "$KERNEL_IMAGE" "$@"
            x="$?"
            [ "$x" = "$SKIP_REMAINING" ] && break
            ret=$((ret + x))
        done
        ;;

    remove)
        for f in $PLUGINS; do
            [ "$KERNEL_INSTALL_VERBOSE" -gt 0 ] && echo "+$f remove $KERNEL_VERSION $ENTRY_DIR_ABS"
            "$f" remove "$KERNEL_VERSION" "$ENTRY_DIR_ABS"
            x="$?"
            [ "$x" = "$SKIP_REMAINING" ] && break
            ret=$((ret + x))
        done

        if [ "$MAKE_EDA" -eq 0 ]; then
            [ "$KERNEL_INSTALL_VERBOSE" -gt 0 ] && echo "Removing $ENTRY_DIR_ABS/"
            rm -rf "$ENTRY_DIR_ABS"
        fi
        ;;

    *)
        echo "Unknown command '$COMMAND'" >&2
        exit 1
        ;;
esac

exit $ret
